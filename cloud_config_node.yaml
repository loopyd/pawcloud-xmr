#cloud-config

# This is a config.yaml instance template for exoscale.  You can modify this template to your liking for UserData fields of aws or what ever have you.
# You should start with a Ubuntu 20.04 LTS server minimal base image and copy/paste this in the UserData field.

# Group and user configuration
groups:
  - ubuntu [root,sys]
  - cloud-users
  
users:
  - default
  - name: xmrnode
    gecos: PawCloud XMR Node User
    home: /home/xmrnode
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    primary_group: xmrnode
    groups: cloud-users
    plain_text_passwd: 'pawcloud-xmrnode1'
    ssh_import_id: None
    lock_passwd: false

# Filesystem configuration
growpart:
    mode: auto
    devices: ["/"]
    ignore_growroot_disabled: false

# Files to write.
write_files:
  - path: /etc/netplan/eth1.yaml
    content: |
      network:
        version: 2
        ethernets:
          eth1:
            dhcp4: true
  - path: /home/xmrnode/install-xmrnode.sh
    content: |
      #/bin/bash
      . ~/.bashrc
      if [ -d ~/xmrig ]; then
          rm -rfv ~/xmrig
      fi
      sudo apt-get -y install git build-essential cmake automake libtool autoconf
      git clone https://github.com/xmrig/xmrig.git
      mkdir xmrig/build && cd xmrig/scripts
      ./build_deps.sh && cd ../build
      cmake .. -DXMRIG_DEPS=scripts/deps
      make -j$(nproc)
      mv ./xmrig ~/xmrig.bin
      rm -rfd ~/xmrig
      mkdir ~/xmrig
      mv ~/xmrig.bin ~/xmrig/xmrig
      cat <<EOF > ./xmrig/config.json
      {
      "autosave": true,
      "background": false,
      "colors": true,
      "title": true,
      "randomx": {
          "init": -1,
          "mode": "auto",
          "1gb-pages": true,
          "rdmsr": true,
          "wrmsr": true,
          "cache_qos": false,
          "numa": true,
          "scratchpad_prefetch_mode": 1
      },
      "cpu": true,
      "opencl": false,
      "cuda": false,
      "pools": [
          {
              "algo": "rx/0",
              "coin": null,
              "url": "stratum+ssl://pool.supportxmr.com:443",
              "user": "${MY_WALLET}",
              "pass": "${MY_NODE}",
              "rig-id": null,
              "nicehash": false,
              "keepalive": true,
              "enabled": true,
              "tls": true,
              "tls-fingerprint": null,
              "daemon": false,
              "socks5": null,
              "self-select": null
          }
      ],
      "print-time": 60,
      "health-print-time": 60,
      "retries": 5,
      "retry-pause": 5,
      "syslog": false,
      "tls": {
          "enabled": false,
          "protocols": null,
          "cert": null,
          "cert_key": null,
          "ciphers": null,
          "ciphersuites": null,
          "dhparam": null
      },
      "user-agent": null,
      "verbose": 0,
      "watch": false,
      "pause-on-battery": false
      }
      EOF
      NPROC=$(nproc)
      sudo tee /etc/sysctl.d/10-hugepages.conf >/dev/null <<EOF
      vm.nr_hugepages = ${NPROC}
      EOF
      sudo sysctl -w vm.nr_hugepages=`nproc`
      for i in $(sudo find /sys/devices/system/node/node* -maxdepth 0 -type d);
      do
        MY_DEVFILE="$i/hugepages/hugepages-1048576kB/nr_hugepages"
        if [ -f "$MY_DEVFILE" ]; then
            echo 3 | sudo tee $MY_DEVFILE >/dev/null
        fi
      done
      MY_MEMLOCK=`bc -l <<< $(cat /proc/meminfo | grep -i MemTotal | awk '{print $2}')*0.90 | awk '{print int($1+0.5)}'`
      sudo tee /etc/security/limits.d/60-memlock.conf >/dev/null <<EOF
      *    -    memlock ${MY_MEMLOCK}
      root -    memlock ${MY_MEMLOCK}
      EOF
      sudo tee /etc/security/limits.d/60-nofile.conf >/dev/null <<EOF 
      *    soft nofile 10000
      root soft nofile 10000
      *    hard nofile 10000
      root hard nofile 10000
      EOF
      sudo service procps force-reload

# Package manager
apt_update: true
apt_upgrade: true
apt_reboot_if_required: false

# Commands to run
runcmd:
  - [ netplan, apply ]
  - [ sh, -xc, "cp /etc/skel/.* /home/xmrnode" ]
  - [ sh, -xc, "chown -R xmrnode:xmrnode /home/xmrnode" ]
  - [ sh, -xc, "chmod +x /home/xmrnode/install-xmrnode.sh" ]
  - [ su, -c, /home/xmrnode/install-node.sh, -s, /bin/bash, xmrnode ]

